-- Windowing functions
-- LEAD
The number of rows to lead can optionally be specified. If the number of rows to lead is not specified, the lead is one row.
Returns null when the lead for the current row extends beyond the end of the window.

select *,lead(sal,1) OVER (order by sal) from test;

OK
1       1000.0  1000.0
2       1000.0  2000.0
1       2000.0  2500.0
1       2500.0  3000.0
2       3000.0  10000.0
3       10000.0 10000.0
4       10000.0 40000.0
3       40000.0 50000.0
2       50000.0 50000.0
5       50000.0 NULL

select *,lead(sal,1) OVER (partition by id order by sal) from test;

 OK
1       1000.0  2000.0
1       2000.0  2500.0
1       2500.0  NULL
2       1000.0  3000.0
2       3000.0  50000.0
2       50000.0 NULL
3       10000.0 40000.0
3       40000.0 NULL
4       10000.0 NULL
5       50000.0 NULL



-- LAG
The number of rows to lag can optionally be specified. If the number of rows to lag is not specified, the lag is one row.
Returns null when the lag for the current row extends before the beginning of the window.

select *,lag(sal,1) OVER (order by sal) from test;
  
OK
1       1000.0  NULL
2       1000.0  1000.0
1       2000.0  1000.0
1       2500.0  2000.0
2       3000.0  2500.0
3       10000.0 3000.0
4       10000.0 10000.0
3       40000.0 10000.0
2       50000.0 40000.0
5       50000.0 50000.0

select *,lag(sal,1) OVER (partition by id order by sal) from test;

OK
1       1000.0  NULL
1       2000.0  1000.0
1       2500.0  2000.0
2       1000.0  NULL
2       3000.0  1000.0
2       50000.0 3000.0
3       10000.0 NULL
3       40000.0 10000.0
4       10000.0 NULL
5       50000.0 NULL


-- FIRST_VALUE
This takes at most two parameters. The first parameter is the column for which you want the first value, the second (optional) parameter must be a boolean which is false by default. If set to true it skips null values.
This returns first value from ordered set of values

select *, FIRST_VALUE (sal) OVER (order by sal) from test;

OK
1       1000.0  1000.0
2       1000.0  1000.0
1       2000.0  1000.0
1       2500.0  1000.0
2       3000.0  1000.0
3       10000.0 1000.0
4       10000.0 1000.0
3       40000.0 1000.0
2       50000.0 1000.0
5       50000.0 1000.0


 select *, FIRST_VALUE (sal) OVER (partition by id order by sal) from test;
 
 OK
1       1000.0  1000.0
1       2000.0  1000.0
1       2500.0  1000.0
2       1000.0  1000.0
2       3000.0  1000.0
2       50000.0 1000.0
3       10000.0 10000.0
3       40000.0 10000.0
4       10000.0 10000.0
5       50000.0 50000.0



-- LAST_VALUE
This takes at most two parameters. The first parameter is the column for which you want the last value, the second (optional) parameter must be a boolean which is false by default. If set to true it skips null values.
The OVER clause
OVER with standard aggregates:
COUNT
SUM
MIN
MAX
AVG
OVER with a PARTITION BY statement with one or more partitioning columns of any primitive datatype.
OVER with PARTITION BY and ORDER BY with one or more partitioning and/or ordering columns of any datatype.
OVER with a window specification. Windows can be defined separately in a WINDOW clause. Window specifications support the following formats:

(ROWS | RANGE) BETWEEN (UNBOUNDED | [num]) PRECEDING AND ([num] PRECEDING | CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)
(ROWS | RANGE) BETWEEN CURRENT ROW AND (CURRENT ROW | (UNBOUNDED | [num]) FOLLOWING)
(ROWS | RANGE) BETWEEN [num] FOLLOWING AND (UNBOUNDED | [num]) FOLLOWING
When ORDER BY is specified with missing WINDOW clause, the WINDOW specification defaults to RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW.

When both ORDER BY and WINDOW clauses are missing, the WINDOW specification defaults to ROW BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.

The OVER clause supports the following functions, but it does not support a window with them (see HIVE-4797):

Ranking functions: Rank, NTile, DenseRank, CumeDist, PercentRank.

Lead and Lag functions.

Analytics functions
-- RANK
-- ROW_NUMBER
-- DENSE_RANK
-- CUME_DIST
-- PERCENT_RANK
-- NTILE


PERCENT_RANK :

PERCENT_RANK() = (RANK() – 1) / (Total Rows – 1)


ROW NUMBER VS RANK VS DENSE_RANK

row_number : returns unique value for each row starting from 1.
RANK : returns unique value for each value except for rows having duplicate values, skips rank based on duplicate values
dense_rank : returns unique value for each value except for rows having duplicate values, wont skip any values

 create table test(id int , sal double);
 
 insert into test values(1,1000),(1,2000),(1,2500),(2,50000),(2,1000),(2,3000),(3,10000),(3,40000),(4,10000),(5,50000);

select id ,sal , ROW_NUMBER () OVER (PARTITION BY id ORDER BY sal) as rownum from test;

OK
1       1000.0  1
1       2000.0  2
1       2500.0  3
2       1000.0  1
2       3000.0  2
2       50000.0 3
3       10000.0 1
3       40000.0 2
4       10000.0 1
5       50000.0 1

select id ,sal , ROW_NUMBER () OVER (ORDER BY id) as rownum from test;
OK
1       1000.0  1
1       2000.0  2
1       2500.0  3
2       50000.0 4
2       1000.0  5
2       3000.0  6
3       10000.0 7
3       40000.0 8
4       10000.0 9
5       50000.0 10



select id ,sal , RANK () OVER (PARTITION BY id ORDER BY sal) as rnk from test;

OK
1       1000.0  1
1       2000.0  2
1       2500.0  3
2       1000.0  1
2       3000.0  2
2       50000.0 3
3       10000.0 1
3       40000.0 2
4       10000.0 1
5       50000.0 1


select id ,sal , RANK () OVER (ORDER BY id) as rnk from test;
OK
1       1000.0  1
1       2000.0  1
1       2500.0  1
2       50000.0 4
2       1000.0  4
2       3000.0  4
3       10000.0 7
3       40000.0 7
4       10000.0 9
5       50000.0 10


select id ,sal , DENSE_RANK () OVER (PARTITION BY id ORDER BY sal) as dn_rk from test;

OK
1       1000.0  1
1       2000.0  2
1       2500.0  3
2       1000.0  1
2       3000.0  2
2       50000.0 3
3       10000.0 1
3       40000.0 2
4       10000.0 1
5       50000.0 1


select id ,sal , DENSE_RANK () OVER (ORDER BY id) as dn_rnk from test;

OK
1       1000.0  1
1       2000.0  1
1       2500.0  1
2       50000.0 2
2       1000.0  2
2       3000.0  2
3       10000.0 3
3       40000.0 3
4       10000.0 4
5       50000.0 5

NTILE : - Splits data into buckets

here no of buckets =3
 select NTILE(3) OVER(ORDER BY sal),*  from test;
 OK
1       1       1000.0
1       2       1000.0
1       1       2000.0
1       1       2500.0
2       2       3000.0
2       3       10000.0
2       4       10000.0
3       3       40000.0
3       2       50000.0
3       5       50000.0

select NTILE(4) OVER(ORDER BY sal),*  from test;
OK
1       1       1000.0
1       2       1000.0
1       1       2000.0
2       1       2500.0
2       2       3000.0
2       3       10000.0
3       4       10000.0
3       3       40000.0
4       2       50000.0
4       5       50000.0
